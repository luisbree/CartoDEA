// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow to suggest interesting areas to explore based on geographic features.
 *
 * - suggestExplorationAreas - A function that suggests areas to explore.
 * - SuggestExplorationAreasInput - The input type for the suggestExplorationAreas function.
 * - SuggestExplorationAreasOutput - The return type for the suggestExplorationAreas function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestExplorationAreasInputSchema = z.object({
  userPreferences: z
    .string()
    .describe(
      'The users preferences, such as preferred activities, desired difficulty, etc.'
    ),
  currentLocation: z
    .string()
    .describe(
      'The users current location, formatted as a string with latitude and longitude.
      Example: 34.0522,-118.2437'
    ),
});
export type SuggestExplorationAreasInput = z.infer<
  typeof SuggestExplorationAreasInputSchema
>;

const SuggestExplorationAreasOutputSchema = z.object({
  suggestedAreas: z
    .array(z.string())
    .describe('An array of suggested areas to explore.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the suggested areas.'),
});
export type SuggestExplorationAreasOutput = z.infer<
  typeof SuggestExplorationAreasOutputSchema
>;

export async function suggestExplorationAreas(
  input: SuggestExplorationAreasInput
): Promise<SuggestExplorationAreasOutput> {
  return suggestExplorationAreasFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestExplorationAreasPrompt',
  input: {schema: SuggestExplorationAreasInputSchema},
  output: {schema: SuggestExplorationAreasOutputSchema},
  prompt: `You are an expert travel guide, adept at identifying interesting and unique places for users to explore. 

  Based on the user's current location and preferences, suggest some areas for exploration. Provide a short description of each area and why it would be of interest to the user.

  User Preferences: {{{userPreferences}}}
  Current Location: {{{currentLocation}}}

  Return your answer as a JSON object matching the following schema:
  {
    "suggestedAreas": ["Area 1", "Area 2", "Area 3"],
    "reasoning": "Explanation of why these areas were suggested."
  }
`,
});

const suggestExplorationAreasFlow = ai.defineFlow(
  {
    name: 'suggestExplorationAreasFlow',
    inputSchema: SuggestExplorationAreasInputSchema,
    outputSchema: SuggestExplorationAreasOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
